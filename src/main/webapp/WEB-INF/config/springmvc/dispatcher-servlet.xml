<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:p="http://www.springframework.org/schema/p"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
                http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">

<!--  @Controller 컴포넌트 스캔 시작 -->
    <context:component-scan base-package="able.**.web">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>
<!--  @Controller 컴포넌트 스캔 끝 -->

<!-- LocaleResolver 선언 시작 -->
	<!-- 세션을 이용한 Locale 정보 사용  -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />
<!-- LocaleResolver 선언 끝 -->

<!-- Interceptor 선언 시작  -->
	<!-- LocaleChangeInterceptor의 확장.
	 localeParamName에 설정된 값으로 언어 변경 가능 -->
    <bean id="commonInterceptor" class="able.com.web.interceptor.CommonInterceptor">
        <property name="localeParamName" value="ABLE_LANGUAGE_SELECTION_PARAM" />
    </bean>
    
    <!-- 웹보안 인터셉터 -->
    <bean id = "webSecurityInterceptor" class="able.com.web.interceptor.WebSecurityInterceptor" />
<!-- Interceptor 선언 끝 -->

<!-- HandlerMappings 선언 시작 -->
		<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
		<mvc:interceptors>
			<!-- 전체 적용되는 인터셉터 -->
			<ref bean="commonInterceptor"/>
			<ref bean="webSecurityInterceptor"/>
			
			<!-- 부분 적용되는 인터셉터 - ->
			<mvc:interceptor>
				<!- - 적용할 url 패턴 - ->
				<mvc:mapping path="/**/*.do" />
				<!- - 제외할 url 패턴  - ->
				<mvc:exclude-mapping path="/**/login.do"/>
				<ref bean="customInterceptor" />
			</mvc:interceptor> -->
		</mvc:interceptors>
<!-- HandlerMappings 선언 끝  -->

<!-- HandlerAdapters 선언 시작 -->
    <!--
        URI 와 매핑되는 Contorller 의 메소드를 실행시,
        파라미터로 존재하는 타입에 대한 ArgumentResolver를 실행하여 가져온다.
     -->
    <bean class="able.com.web.servlet.HRequestMappingHandlerAdapter">
        <!--
            - ArgumentResolver 처리 우선권은 3가지로 설정할수 있다.
            1. AbleCustomArgumentResolvers
            2. ArgumentResolvers (Spring)
            3. CustomArgumentResolvers 
         -->
        <property name="ableCustomArgumentResolvers">
            <list>
            	<!-- HMap을 위한 Argument Resolver -->
                <bean class="able.com.web.context.HMapHandlerMethodArgumentResolver" />
            </list>
        </property>
        <!-- 타입 변환을 위한 설정
        	- 처리 우선순위
        	1. Custom PropertyEditor
        	2. Conversion Service (Converter)
        	3. Default PropertyEditor
        -->
        <property name="webBindingInitializer">
            <bean class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
                <property name="conversionService" ref="conversionService" />
                <property name="validator" ref="validator" />
                <!-- 추가할 Custom PropertyEditor 
                <property name="propertyEditorRegistrar"/> -->
            </bean>
        </property>
        <!-- true로 설정 시 Session 별로 직렬로 동작 -->
        <property name="synchronizeOnSession" value="false" />
    </bean>

	<!-- Type Conversion 서비스 (Spring 3) -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
          <!-- 추가할 Custom Conversion Service/Formatter -->
          <!--
          <property name="converters"></property>
          <property name="formatters"></property>
           -->
    </bean>

	<!-- Validation 사용을 위한 Hibernate validator-->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="validationMessageSource" ref="messageSource" />
    </bean>
<!-- HandlerAdapter 선언 끝 -->

<!-- ViewResolver 선언 시작 -->
	<!-- View를 선택하는 ViewResolver 설정 -->
    <!-- JSTL(JSP) View 설정
    	- Controller에서 "vets" 라는 view 이름을 리턴할 경우,
    	- prefix와 suffix를 합하여 적절한 view를 찾는다.
    	- 예) prefix(/WEB-INF/jsp/) + "vets" + suffix(.jsp) = "/WEB-INF/jsp/vets.jsp"
    -->
    <bean id="urlBasedView" class="org.springframework.web.servlet.view.UrlBasedViewResolver" p:order="0"
        p:viewClass="org.springframework.web.servlet.view.JstlView"
        p:prefix="/WEB-INF/jsp/" p:suffix=".jsp"/>

    <!-- Controller에서 처리 로직이 없이 바로 view로 이동하는 경우에 사용하는 Controller
       DispatcherServlet을 거쳐야 하지만, html 위주의 static한 페이지를 보여줄때 사용
       URL path가 곧 뷰이름이 되며, prefix와 suffix를 지정할수도 있다.
     -->
    <bean id="urlFilenameViewController" class="org.springframework.web.servlet.mvc.UrlFilenameViewController"/>
    
	<!--  jsonView (jackson) 설정.
		- jackson을 이용한 object,json 간의 mapper 사용 view 
	 -->
	<bean id="jsonMapper" class="com.fasterxml.jackson.databind.ObjectMapper"/>
    <bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
        <property name="objectMapper" ref="jsonMapper" />
    </bean>
    
	<!-- BeanNameViewResolver
	    - view 이름과 bean 이름(name,id)가 일치하는 view 사용
	-->
    <bean id="beanNameResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="1"/>
<!-- ViewResolver 선언 끝 -->

    
</beans>